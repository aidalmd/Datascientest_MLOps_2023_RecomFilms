import pytest
import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)

from modeling import (
    prepare_data_model, 
    save_model,
    store_predictions_df, 
    give_recommendations
)

# Sample data for testing
test_df = pd.DataFrame({
    'title': ['Film1', 'Film2', 'Film3', 'Film4', 'Film5'],
    'tags': ['tag1,tag2', 'tag2,tag3', 'tag3,tag4', 'tag4,tag5', 'tag5,tag6'],
    'genres': ['genre1', 'genre2', 'genre3', 'genre4', 'genre5'],
    'directors': ['director1', 'director2', 'director3', 'director4', 'director5'],
    'cast': ['cast1', 'cast2', 'cast3', 'cast4', 'cast5'],
    'synopsis': ['synopsis1', 'synopsis2', 'synopsis3', 'synopsis4', 'synopsis5'],
    'rating': [4.5, 3.8, 4.2, 3.5, 4.8]
})

@pytest.fixture
def similarity_matrix():
    # Replace this with the actual similarity matrix generated by prepare_data_model
    return np.array([
        [1.0, 0.7, 0.4, 0.3, 0.2],
        [0.7, 1.0, 0.6, 0.2, 0.1],
        [0.4, 0.6, 1.0, 0.8, 0.5],
        [0.3, 0.2, 0.8, 1.0, 0.9],
        [0.2, 0.1, 0.5, 0.9, 1.0]
    ])

def test_prepare_data_model():
    # Test prepare_data_model function
    cfg = {
        'model': {
            'drop_columns': [],
            'content_features': ['synopsis', 'title', 'rating'],
            'processed_features': ['genres', 'directors', 'cast'],
            'max_features': 100
        },
        'recommendation': {
            'top_n': 2,
            'rating_threshold': 4.0
        }
    }
    similarity = prepare_data_model(test_df, cfg)
    assert similarity.shape == (5, 5)

def test_give_recommendations(similarity_matrix, monkeypatch):
    # Test give_recommendations function
    film = 'Film1'
    # Simulate user input for the input() function
    monkeypatch.setattr('builtins.input', lambda x: 'y')
    result = give_recommendations(test_df, film, similarity_matrix)
    assert result is not None

def test_store_predictions_df():
    # Test store_predictions_df function
    films_predictions = {'recom_date': '20230101', 'user_film': 'Film1', 'recommended_films': ('Film2', 'Film3'), 'recommended_ratings': (3.8, 4.2)}
    df = store_predictions_df(films_predictions)
    assert isinstance(df, pd.DataFrame)
    assert df.shape == (2, 4)

# Sample test for save_model function (since it doesn't have complex logic)
def test_save_model(tmp_path):
    model = "This is a sample model."
    filepath = tmp_path / "sample_model.pkl"
    save_model(model, filepath)
    assert filepath.exists()

# run pytest, 4 passed